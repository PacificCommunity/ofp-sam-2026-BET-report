name: BET-2026 Report Pipeline

on:
  workflow_dispatch:
    inputs:
      run_mode:
        description: "Select pipeline mode"
        required: true
        default: "full"
        type: choice
        options:
          - full
          - plots_only
          - report_only
      version_note:
        description: "Optional note for this release"
        required: false
        default: ""
  push:
    branches: [main]

jobs:
  build-and-release:
    runs-on: ubuntu-22.04
    env:
      RUN_PIPELINE: ${{ vars.RUN_PIPELINE }}

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Skip push if automatic execution is off
      - name: Skip push if RUN_PIPELINE=false
        if: ${{ github.event_name == 'push' && env.RUN_PIPELINE != 'true' }}
        run: |
          echo "Automatic execution is disabled. Exiting."
          exit 0

      # Pull Docker image
      - name: Pull BET-2026 Docker image
        if: ${{ github.event_name == 'workflow_dispatch' || env.RUN_PIPELINE == 'true' }}
        run: docker pull ghcr.io/pacificcommunity/bet-2026:v1.2

      # Run pipeline according to mode
      - name: Run BET-2026 pipeline
        if: ${{ github.event_name == 'workflow_dispatch' || env.RUN_PIPELINE == 'true' }}
        run: |
          MODE="${{ github.event.inputs.run_mode }}"
          if [ "$MODE" = "plots_only" ]; then
            make docker-plot_sens
            make docker-plot_grid
          elif [ "$MODE" = "report_only" ]; then
            make docker-report
          else
            make docker-plot_sens
            make docker-plot_grid
            make docker-report
          fi

      # Prepare release directory
      - name: Prepare release directory
        if: ${{ github.event_name == 'workflow_dispatch' || env.RUN_PIPELINE == 'true' }}
        run: |
          mkdir -p public
          cp report/bet-2026.pdf public/ || true
          cp plot/plots_sens.html public/ || true
          cp plot/plots_grid.html public/ || true

      # Deploy to GitHub Pages via gh CLI (avoiding automatic deployment records)
      - name: Deploy to GitHub Pages via gh CLI
        if: ${{ github.event_name == 'workflow_dispatch' || env.RUN_PIPELINE == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -B gh-pages
          git rm -rf .
          cp -r public/* .
          git add .
          git commit -m "Update GitHub Pages content"
          git push -f origin gh-pages

      # Create a unique version tag safely
      - name: Create version tag
        if: ${{ github.event_name == 'workflow_dispatch' || env.RUN_PIPELINE == 'true' }}
        id: tag
        run: |
          DATE=$(date +'%Y%m%d')
          BASE_TAG="v${DATE}"
          git fetch --tags
          COUNT=0
          TAG="$BASE_TAG"
          while git ls-remote --tags origin | grep -q "refs/tags/$TAG"; do
            COUNT=$((COUNT + 1))
            TAG="${BASE_TAG}-$COUNT"
          done
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          git tag "$TAG"
          git push origin "$TAG"

      # Create GitHub Release
      - name: Create GitHub Release
        if: ${{ github.event_name == 'workflow_dispatch' || env.RUN_PIPELINE == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: BET-2026 Report ${{ steps.tag.outputs.tag }}
          body: |
            ## BET-2026 Automated Report
            **Mode:** ${{ github.event.inputs.run_mode }}
            ${{ github.event.inputs.version_note }}

            **View online:**  
            - [Sensitivity Plots](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/plots_sens.html)  
            - [Grid Plots](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/plots_grid.html)  
            - [PDF Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/bet-2026.pdf)
          files: |
            report/bet-2026.pdf
            plot/plots_sens.html
            plot/plots_grid.html

      # Cleanup old deployments older than 30 minutes
      - name: Cleanup old deployments (keep last 30 min)
        if: ${{ github.event_name == 'workflow_dispatch' || env.RUN_PIPELINE == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO=$GITHUB_REPOSITORY
          NOW=$(date -u +%s)  # Current UTC time
          sudo apt-get update && sudo apt-get install -y jq
          DEPLOYMENTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/$REPO/deployments \
            | jq -c '.[] | {id: .id, created_at: .created_at}')
          echo "$DEPLOYMENTS" | while read deployment; do
            ID=$(echo "$deployment" | jq -r '.id')
            CREATED=$(echo "$deployment" | jq -r '.created_at')
            CREATED_TS=$(date -d "$CREATED" +%s)
            DIFF=$((NOW - CREATED_TS))
            if [ "$DIFF" -gt 1800 ]; then
              echo "Deleting deployment $ID created at $CREATED (older than 30 min)"
              curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                https://api.github.com/repos/$REPO/deployments/$ID
            else
              echo "Keeping deployment $ID created at $CREATED (within 30 min)"
            fi
          done

